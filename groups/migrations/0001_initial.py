# Generated by Django 4.2.7 on 2025-09-14 11:06

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('properties', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RoommateGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Group name', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Group description and goals')),
                ('max_members', models.PositiveIntegerField(default=4, help_text='Maximum number of members', validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(10)])),
                ('min_members', models.PositiveIntegerField(default=2, help_text='Minimum number of members to be active', validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(8)])),
                ('target_budget_min', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum total weekly rent budget', max_digits=8, null=True)),
                ('target_budget_max', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum total weekly rent budget', max_digits=8, null=True)),
                ('preferred_locations', models.JSONField(default=list, help_text='Preferred suburbs/locations')),
                ('required_bedrooms', models.PositiveIntegerField(blank=True, help_text='Number of bedrooms needed', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('required_bathrooms', models.PositiveIntegerField(blank=True, help_text='Minimum number of bathrooms', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('move_in_date', models.DateField(blank=True, null=True)),
                ('lease_length_months', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(24)])),
                ('pet_friendly', models.BooleanField(blank=True, null=True)),
                ('smoking_allowed', models.BooleanField(blank=True, null=True)),
                ('furnished_preference', models.CharField(choices=[('unfurnished', 'Unfurnished'), ('semi_furnished', 'Semi-furnished'), ('fully_furnished', 'Fully Furnished'), ('no_preference', 'No Preference')], default='no_preference', max_length=20)),
                ('status', models.CharField(choices=[('forming', 'Forming'), ('active', 'Active'), ('house_hunting', 'House Hunting'), ('housed', 'Housed'), ('disbanded', 'Disbanded')], default='forming', max_length=20)),
                ('is_private', models.BooleanField(default=False, help_text='Private groups can only be joined by invitation')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'groups_roommategroup',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['status', 'is_active'], name='groups_room_status_444d9b_idx'), models.Index(fields=['created_at'], name='groups_room_created_40f257_idx'), models.Index(fields=['max_members'], name='groups_room_max_mem_a6bbe6_idx')],
            },
        ),
        migrations.CreateModel(
            name='PropertyApplication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('application_message', models.TextField(help_text='Message to property owner/agent')),
                ('proposed_move_in_date', models.DateField()),
                ('proposed_lease_length', models.PositiveIntegerField(help_text='Proposed lease length in months')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('withdrawn', 'Withdrawn')], default='draft', max_length=20)),
                ('votes_required', models.PositiveIntegerField(help_text='Number of member votes required to submit')),
                ('votes_received', models.PositiveIntegerField(default=0)),
                ('response_message', models.TextField(blank=True)),
                ('response_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_applications', to='groups.roommategroup')),
                ('property_listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_applications', to='properties.property')),
            ],
            options={
                'db_table': 'groups_propertyapplication',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('member', 'Member')], default='member', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('active', 'Active'), ('left', 'Left Group'), ('removed', 'Removed')], default='pending', max_length=20)),
                ('join_reason', models.TextField(blank=True, help_text='Why user wants to join')),
                ('can_invite_members', models.BooleanField(default=False)),
                ('can_manage_applications', models.BooleanField(default=False)),
                ('can_edit_group', models.BooleanField(default=False)),
                ('joined_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='groups.roommategroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'groups_groupmembership',
            },
        ),
        migrations.CreateModel(
            name='GroupInvitation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message', models.TextField(blank=True, help_text='Personal invitation message')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(help_text='When this invitation expires')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='groups.roommategroup')),
                ('invitee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_group_invitations', to=settings.AUTH_USER_MODEL)),
                ('inviter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_group_invitations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'groups_groupinvitation',
            },
        ),
        migrations.CreateModel(
            name='GroupActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('member_joined', 'Member Joined'), ('member_left', 'Member Left'), ('member_removed', 'Member Removed'), ('application_created', 'Application Created'), ('application_submitted', 'Application Submitted'), ('application_voted', 'Application Vote Cast'), ('group_updated', 'Group Updated'), ('invitation_sent', 'Invitation Sent')], max_length=30)),
                ('description', models.TextField(help_text='Description of the activity')),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='groups.roommategroup')),
                ('user', models.ForeignKey(blank=True, help_text='User who performed the activity', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'groups_groupactivity',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ApplicationVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote', models.CharField(choices=[('yes', 'Yes'), ('no', 'No'), ('abstain', 'Abstain')], max_length=10)),
                ('comment', models.TextField(blank=True, help_text='Optional comment with vote')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='groups.propertyapplication')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='application_votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'groups_applicationvote',
            },
        ),
        migrations.AddIndex(
            model_name='propertyapplication',
            index=models.Index(fields=['group', 'status'], name='groups_prop_group_i_00c723_idx'),
        ),
        migrations.AddIndex(
            model_name='propertyapplication',
            index=models.Index(fields=['property_listing', 'status'], name='groups_prop_propert_bc29a3_idx'),
        ),
        migrations.AddIndex(
            model_name='propertyapplication',
            index=models.Index(fields=['status', 'created_at'], name='groups_prop_status_336322_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='propertyapplication',
            unique_together={('group', 'property_listing')},
        ),
        migrations.AddIndex(
            model_name='groupmembership',
            index=models.Index(fields=['group', 'status'], name='groups_grou_group_i_d0a4fa_idx'),
        ),
        migrations.AddIndex(
            model_name='groupmembership',
            index=models.Index(fields=['user', 'status'], name='groups_grou_user_id_fbaf63_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='groupmembership',
            unique_together={('group', 'user')},
        ),
        migrations.AddIndex(
            model_name='groupinvitation',
            index=models.Index(fields=['invitee', 'status'], name='groups_grou_invitee_543914_idx'),
        ),
        migrations.AddIndex(
            model_name='groupinvitation',
            index=models.Index(fields=['group', 'status'], name='groups_grou_group_i_4a210c_idx'),
        ),
        migrations.AddIndex(
            model_name='groupinvitation',
            index=models.Index(fields=['expires_at'], name='groups_grou_expires_f89d2e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='groupinvitation',
            unique_together={('group', 'invitee')},
        ),
        migrations.AddIndex(
            model_name='groupactivity',
            index=models.Index(fields=['group', 'created_at'], name='groups_grou_group_i_8eb7f3_idx'),
        ),
        migrations.AddIndex(
            model_name='groupactivity',
            index=models.Index(fields=['activity_type', 'created_at'], name='groups_grou_activit_fa924a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='applicationvote',
            unique_together={('application', 'member')},
        ),
    ]
