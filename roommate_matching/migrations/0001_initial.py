# Generated by Django 4.2.7 on 2025-09-14 02:51

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CompatibilityScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_score', models.FloatField(help_text='Overall compatibility score from 0-100', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('lifestyle_score', models.FloatField(default=0.0)),
                ('budget_score', models.FloatField(default=0.0)),
                ('location_score', models.FloatField(default=0.0)),
                ('schedule_score', models.FloatField(default=0.0)),
                ('preferences_score', models.FloatField(default=0.0)),
                ('habits_score', models.FloatField(default=0.0)),
                ('score_breakdown', models.JSONField(default=dict, help_text='Detailed score breakdown')),
                ('calculated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compatibility_scores_as_user1', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compatibility_scores_as_user2', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'roommate_matching_compatibilityscore',
                'ordering': ['-overall_score'],
            },
        ),
        migrations.CreateModel(
            name='MatchingCriteria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('budget_importance', models.IntegerField(default=5, help_text='How important is budget compatibility (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('location_importance', models.IntegerField(default=4, help_text='How important is location compatibility (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('lifestyle_importance', models.IntegerField(default=4, help_text='How important is lifestyle compatibility (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('schedule_importance', models.IntegerField(default=3, help_text='How important is schedule compatibility (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('habits_importance', models.IntegerField(default=4, help_text='How important are habits/cleanliness compatibility (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('deal_breakers', models.JSONField(default=list, help_text='Absolute deal breakers (smoking, pets, etc.)')),
                ('preferred_traits', models.JSONField(default=list, help_text='Preferred traits in roommates')),
                ('strict_age_preference', models.BooleanField(default=False, help_text='Strictly enforce age preferences')),
                ('strict_gender_preference', models.BooleanField(default=False, help_text='Strictly enforce gender preferences')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='matching_criteria', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Matching Criteria',
                'db_table': 'roommate_matching_matchingcriteria',
            },
        ),
        migrations.CreateModel(
            name='UserRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Why this user is recommended')),
                ('highlighted_matches', models.JSONField(default=list, help_text='Key matching factors to highlight')),
                ('is_viewed', models.BooleanField(default=False)),
                ('is_contacted', models.BooleanField(default=False)),
                ('is_dismissed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('viewed_at', models.DateTimeField(blank=True, null=True)),
                ('contacted_at', models.DateTimeField(blank=True, null=True)),
                ('compatibility_score', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='roommate_matching.compatibilityscore')),
                ('recommended_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommended_to', to=settings.AUTH_USER_MODEL)),
                ('target_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'roommate_matching_userrecommendation',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['target_user', 'is_dismissed'], name='roommate_ma_target__918407_idx'), models.Index(fields=['recommended_user'], name='roommate_ma_recomme_544e03_idx')],
                'unique_together': {('target_user', 'recommended_user')},
            },
        ),
        migrations.CreateModel(
            name='UserInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('view_profile', 'View Profile'), ('send_message', 'Send Message'), ('like_profile', 'Like Profile'), ('dismiss_recommendation', 'Dismiss Recommendation'), ('report_user', 'Report User'), ('block_user', 'Block User')], max_length=30)),
                ('was_recommended', models.BooleanField(default=False, help_text='Was this interaction from a recommendation')),
                ('compatibility_score_at_time', models.FloatField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('source_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions_made', to=settings.AUTH_USER_MODEL)),
                ('target_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions_received', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'roommate_matching_userinteraction',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['source_user', 'interaction_type'], name='roommate_ma_source__7278a5_idx'), models.Index(fields=['target_user', 'interaction_type'], name='roommate_ma_target__7aab6d_idx'), models.Index(fields=['was_recommended'], name='roommate_ma_was_rec_d0bd3d_idx')],
            },
        ),
        migrations.CreateModel(
            name='MatchingActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('score_calculation', 'Score Calculation'), ('recommendation_generation', 'Recommendation Generation'), ('criteria_update', 'Criteria Update'), ('batch_processing', 'Batch Processing')], max_length=30)),
                ('details', models.JSONField(default=dict)),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True)),
                ('execution_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('scores_calculated', models.PositiveIntegerField(default=0)),
                ('recommendations_generated', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matching_activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'roommate_matching_matchingactivity',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['activity_type', 'created_at'], name='roommate_ma_activit_1ef005_idx'), models.Index(fields=['user', 'created_at'], name='roommate_ma_user_id_31d9b2_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='compatibilityscore',
            index=models.Index(fields=['user1', 'overall_score'], name='roommate_ma_user1_i_16feaf_idx'),
        ),
        migrations.AddIndex(
            model_name='compatibilityscore',
            index=models.Index(fields=['user2', 'overall_score'], name='roommate_ma_user2_i_56d932_idx'),
        ),
        migrations.AddIndex(
            model_name='compatibilityscore',
            index=models.Index(fields=['overall_score'], name='roommate_ma_overall_7a250d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='compatibilityscore',
            unique_together={('user1', 'user2')},
        ),
    ]
