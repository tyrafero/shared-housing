# Generated by Django 4.2.7 on 2025-09-19 04:10

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('properties', '0002_propertyimage_image_url_alter_propertyimage_image'),
    ]

    operations = [
        migrations.CreateModel(
            name='PropertyGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Group name', max_length=100)),
                ('status', models.CharField(choices=[('forming', 'Forming'), ('ready', 'Ready to Apply'), ('applied', 'Application Submitted'), ('approved', 'Application Approved'), ('rejected', 'Application Rejected'), ('disbanded', 'Group Disbanded')], default='forming', max_length=20)),
                ('target_size', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('current_size', models.PositiveIntegerField(default=1)),
                ('max_size', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('combined_income_verified', models.BooleanField(default=False)),
                ('budget_meets_requirements', models.BooleanField(default=False)),
                ('agreed_move_in_date', models.DateField(blank=True, null=True)),
                ('viewing_scheduled', models.DateTimeField(blank=True, null=True)),
                ('application_deadline', models.DateField(blank=True, null=True)),
                ('group_bio', models.TextField(blank=True, help_text='Group description for property owner')),
                ('shared_interests', models.JSONField(default=list)),
                ('group_compatibility_score', models.FloatField(default=0.0)),
                ('application_submitted_at', models.DateTimeField(blank=True, null=True)),
                ('application_documents_complete', models.BooleanField(default=False)),
                ('property_owner_response', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_property_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'properties_propertygroup',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PropertyRequirements',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minimum_combined_income', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum combined annual income required', max_digits=10, null=True)),
                ('income_verification_required', models.BooleanField(default=True)),
                ('employment_verification_required', models.BooleanField(default=True)),
                ('preferred_group_size', models.PositiveIntegerField(help_text='Preferred number of tenants', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('min_group_size', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('max_group_size', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('preferred_age_min', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(18), django.core.validators.MaxValueValidator(99)])),
                ('preferred_age_max', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(18), django.core.validators.MaxValueValidator(99)])),
                ('preferred_occupations', models.JSONField(default=list, help_text='List of preferred occupations')),
                ('no_pets', models.BooleanField(default=False)),
                ('no_smoking', models.BooleanField(default=True)),
                ('no_parties', models.BooleanField(default=False)),
                ('references_required', models.BooleanField(default=True)),
                ('required_documents', models.JSONField(default=list, help_text='List of required documents for application')),
                ('application_fee', models.DecimalField(decimal_places=2, default=0, help_text='Application fee amount', max_digits=6)),
                ('viewing_required', models.BooleanField(default=True)),
                ('group_viewing_preferred', models.BooleanField(default=True)),
                ('decision_timeline_days', models.PositiveIntegerField(default=7, help_text='Days to make decision after application')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('property', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='requirements', to='properties.property')),
            ],
            options={
                'verbose_name': 'Property Requirements',
                'verbose_name_plural': 'Property Requirements',
                'db_table': 'properties_propertyrequirements',
            },
        ),
        migrations.CreateModel(
            name='PropertyGroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('creator', 'Group Creator'), ('member', 'Member'), ('pending', 'Pending Invitation')], default='member', max_length=20)),
                ('joined_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('documents_uploaded', models.BooleanField(default=False)),
                ('income_verified', models.BooleanField(default=False)),
                ('ready_to_apply', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
                ('can_be_primary_contact', models.BooleanField(default=False)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='properties.propertygroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'properties_propertygroupmembership',
                'ordering': ['joined_at'],
                'unique_together': {('user', 'group')},
            },
        ),
        migrations.AddField(
            model_name='propertygroup',
            name='members',
            field=models.ManyToManyField(related_name='property_groups', through='properties.PropertyGroupMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='propertygroup',
            name='property_listing',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='properties.property'),
        ),
        migrations.CreateModel(
            name='PropertyInterest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('interested', 'Interested'), ('contacted', 'Contacted Property Owner'), ('viewing_scheduled', 'Viewing Scheduled'), ('applied', 'Applied'), ('withdrawn', 'Withdrawn Interest')], default='interested', max_length=20)),
                ('notes', models.TextField(blank=True, help_text="User's notes about this property")),
                ('budget_confirmed', models.BooleanField(default=False)),
                ('timeline_compatible', models.BooleanField(default=False)),
                ('open_to_group_formation', models.BooleanField(default=True)),
                ('preferred_group_size', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('budget_compatibility_score', models.FloatField(default=0.0)),
                ('lifestyle_compatibility_score', models.FloatField(default=0.0)),
                ('overall_compatibility_score', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('property_listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interested_users', to='properties.property')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_interests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'properties_propertyinterest',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['property_listing', 'status'], name='properties__propert_1f5b59_idx'), models.Index(fields=['user', 'status'], name='properties__user_id_e13ec0_idx')],
                'unique_together': {('user', 'property_listing')},
            },
        ),
        migrations.CreateModel(
            name='PropertyGroupInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('message', models.TextField(blank=True, help_text='Personal message with invitation')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField()),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='properties.propertygroup')),
                ('invited_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_property_group_invitations', to=settings.AUTH_USER_MODEL)),
                ('invited_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_group_invitations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'properties_propertygroupinvitation',
                'ordering': ['-created_at'],
                'unique_together': {('group', 'invited_user')},
            },
        ),
        migrations.AddIndex(
            model_name='propertygroup',
            index=models.Index(fields=['property_listing', 'status'], name='properties__propert_9fd9df_idx'),
        ),
        migrations.AddIndex(
            model_name='propertygroup',
            index=models.Index(fields=['status', 'current_size'], name='properties__status_de4977_idx'),
        ),
    ]
